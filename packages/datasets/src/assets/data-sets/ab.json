{
  "username": "@AsliEngineering",
  "bio": {
    "name": "Arpit Bhayani",
    "detailed": "Arpit Bhayani, associated with @arpit_bhayani, is a highly skilled software engineer, educator, and dedicated tech enthusiast. A crucial update to his professional profile is his current employment at Google, where he works specifically on Google's ad-platform. This role signifies his expertise in developing and managing large-scale, complex software systems within a leading global tech company. While specific details about his previous roles are not extensively detailed in publicly available records, his current prominent position at Google firmly establishes his strong professional background and technical proficiency. He maintains a valuable YouTube presence where he discusses advanced technical topics such as system design and algorithms, catering to an audience interested in deep technical insights and problem-solving. However, his exact YouTube subscriber count is not fully retrieved from the provided data. Similarly, his follower counts on X.com and connections on LinkedIn are unconfirmed, and there are no clear indications of independent startup associations, suggesting a more focused career path within established tech organizations. Despite some limitations in publicly available metrics, his current role at Google solidifies his credibility and expertise in the core software engineering domain, allowing him to contribute valuable knowledge to the broader tech community through his educational content.",
    "short": "Arpit Bhayani is a software engineer currently working at Google on their ad-platform, and a tech educator. He shares insights on system design and algorithms through his YouTube channel."
  },
  "data": [
    {
      "title": "Importance of Writing Meaningful Code",
      "text": "write code that matters write code that solves problem be it a business problem an engineering challenge or a customer paino everything else is just a bunch of UTF characters taking a few million bytes of an old hard disk in some AWS data center but now you would say hey I'm just an engineer I'm doing what my lead or my manager is asking me to do then I have one piece of advice for you probe them with hard questions and make them realize that the effort we are putting in might not be worth it one question that I have personally asked during prioritization meetings is what was the other project that we could have picked up if we were not doing this this one question would spark interesting discussions and we would ensure that we are picking the right things to work at the moment remember you own your career so you should ensure that whatever code you are writing you writing the code that matters"
    },
    {
      "title": "rewrite or reuse",
      "text": "we Engineers love to build stuff from scratch but this approach isn't always optimal let's understand when to rewrite and when to reuse three reasons that makes us write code from scratch are we have a perception that the existing Solutions are outdated or the setup process is difficult or the code base is highly challenging to navigate although the concerns might be valid there is a reason that the phrase don't reinvent the wheel exist given that existing tools are better tested with a great Community Support the long-term benefits would often outweigh the short-term learning curs but there are situations where rewrite is entirely Justified for example when your existing code is either return in some highly outdated language or framework or it's performing very poorly and is becoming a critical bottleneck in such cases rewrite makes sense so while deciding to rewrite or reuse make sure that the benefits of rewrite outweighs the investment we put in"
    },
    {
      "title": "good apis",
      "text": "if you want to write good apis you should follow postals law which states that you should be conservative in what you send and be liberal in what you accept let's understand this better with an example imagine you are building an API using which a person can update their profile details so when API is sending data to the front end it should ensure that all mandatory fields are present profile image URL is actually a URL that exist etc etc this is you being conservative in what you sent this would help keep front end fairly predictive but when you accept the request to update the profile info you should understand the request even if there are minor variations for example a bio if a user sends a longer bio you should accept it but trim it before saving second is username should be accepted in any case but you should convert it to lower case before saving it in the DB this is you being liberal in what you accept I have been following this principle for a very long time and I hope this also helps you WR great apis"
    },
    {
      "title": "C programming fundamentals",
      "text": "no matter if you're coding in Java python or even goang according to me having a decent command of C is essential the two most important aspects that c helped me understand are number one how I/O really works along with its limitation and nuances second how your code interacts with kernel to get things done via system call to understand this better build these two projects in c number one build your own shell this will give you exposure to system calls Process Management and pipes number two build a very simple word dictionary in a single file not an HTTP API but regular function that does file IO to perform simple C operations on the file this will give you exposures of all things related to IO and file handling along with its limitation by the way this were the two assignments from my college days and doing them helped me build better understanding of how things work under the hood I'm not asking you to give up on Java or python but I'm just nudging you to understand C A little better and become a better engineer"
    },
    {
      "title": "language recommendation",
      "text": "if you're learning a new programming language pick the one that makes you look at programming in a totally different way let me explain when you learn a new language you are not just learning the syntax you are adopting a new way of thinking for example learning C made me think harder about how things really work under the hood while learning rust give me a totally different perspective about object ownership by the way why should we challenge ourselves to learn a diametrically opposite language to be honest the software industry is evolving rapidly and we have seen a massive shift in last 3 years and new domains have emerged and they require you to think differently don't believe me try writing a program for gpus or try writing some code in solidity to interface with blockchain so I would say Do not remain stuck in the mindset of a single Paradigm or a single language and if you have some time to spare pick a language build some typ projects and more importantly have fun"
    },
    {
      "title": "outage due to crowd strike",
      "text": "I'm sure you would have seen hundreds of post on this already but here's my quick take first of all it is not a Cyber attack but an outage that happened due to crowd strike as they released an update for Windows that had a buck because it is a spyware it runs in kernel mode to monitor system activity at a very low level the root cause of the issue was a missal check and that led to the codt trying to access an invalid memory location 0x9c which triggered a panic and showed the blue screen of death which eventually affected millions of devices I totally agree better checks should be in place by crowd strike for the release Cycles but what concerned me more were how software Engineers blamed Microsoft for this without knowing the root cause it's like you installing an app from third party granting a root permissions it breaks your phone and you blame OS for it"
    },
    {
      "title": "where he is talking about the difference between latency and response time",
      "text": "so latency and response time are thrown around interchangeably but they are not the same let's understand the difference in the context of a regular apis we write latency refers to cure the a time when your request is waiting to be handled which includes the physical distance that the data needs to Traverse over the network and the time it spends in the queueing high latency typically indicates long physical distances between client and the server on the other hand response time is is the total time elapsed from sending the request to receiving the response and it includes latency and second it also includes the server processing time to generate the response response time is thus used to describe the observed performance of the application"
    },
    {
      "title": "Database auto-increment ID limit issue",
      "text": "imagine a database table with an auto incrementing ID column but what happens when it hits its limit easy to guess the inserts would fail but interestingly in MySQL it fails with a duplicate key error this happens because my SQL does not increment the value Beyond Max integer so max integer + one remains Max integer and when the database tries to insert it with the same ID again you get a duplicate key error to me this is a pretty poor error and they should have done a better job at it the only way to address this issue is to alter the table and change the data type to a larger integer say B but this is a pretty expensive operation as it affects every single row of the table this is not just some random fact but this is something that happened to GitHub in production and I have a TI section video on it which you can find in the pin comments down below give it a watch"
    },
    {
      "title": "understanding address already in use error",
      "text": "so today something interesting happened when I stopped my dice DB process and then tried to run it again it gave an error stating address already in use by trying to debug the root cause I could not find any active process hogging up that Port so what exactly happened digging deeper I found out that my socket was in timecore weight State what exactly is that say A and B are connected via TCP connection in a initiates the termination after exchanging the tear down packets a enters the time we state to ensure that B has received the final acknowledgement packet in case it did not a would be retransmitting the final packet thus providing a clean and complete closure of the TCP connection thus until the socket is in the time bet state it would keep throwing the address already in use error if we try to bind to that socket by the way the fixing it is really easy and I have linked the fix in the pin comments down below"
    },
    {
      "title": "python internals",
      "text": "hi my name is this is honest python and here we learn about python internals by exploring the python source code we'll be trying to find answers to questions like how python implements really long integers how types like list sets and dictionaries implemented in python what kind of algorithms power this language how python performs and implements garbage collections while exploring all of these things we will also be altering a lot of source code and will be implementing some really fun yet weird features to the language so if this sounds exciting to you hop along with me on this journey give a subscribe to this channel and i'll see you in the next one"
    }
  ]
}
